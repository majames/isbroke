var os = require('os');
var cluster = require('cluster');
var EventEmitter = require('events').EventEmitter;

module.exports.watch = function (settings) {
	var isShuttingDown = false;
	
	cluster.setupMaster(settings);
	cluster.on('exit', reviveWorker);
	
	var emitter = new EventEmitter();
	emitter.once('shutdown', shutdown);
	
	process.on('SIGINT', sendShutdownSignal);
	process.on('SIGTERM', sendShutdownSignal);
	
	fork();
	
	function reviveWorker () {
		if (isShuttingDown) {
			return;
		}
		
		cluster.fork();
	};
	
	function sendShutdownSignal() {
		 emitter.emit('shutdown');
	};
	
	function shutdown(settings) {
		isShuttingDown = true;
		
		forEachWorker(function (worker) {
			worker.process.kill();
		});
		
		setTimeout(function () {
			forEachWorker(function (worker) {
				worker.kill();
			});
		}, settings.gracePeriod).unref();
	};
};

function fork() {
	var workers = os.cpus().length;
	
	for (var i = 0; i < workers; i++) {
		cluster.fork();
	}
};

function forEachWorker(callback) {
	for (var id in cluster.workers) {
		var worker = cluster.workers[id];
		callback(worker);
	}
};